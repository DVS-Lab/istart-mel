#!/bin/bash

# ensure paths are correct irrespective from where user runs the script
scriptdir=/ZPOOL/data/projects/istart-mel/updated_rsa/code
maindir=/ZPOOL/data/projects/istart-mel/updated_rsa
nruns=2
task=sharedreward # edit if necessary

# create log file to record what we did and when
logs=$maindir/logs
logfile=${logs}/rerunL1_sharedreward_date-`date +"%FT%H%M"`.log

# Define disk and memory thresholds
DISK_THRESHOLD=95 # percent usage threshold for disk (updated to 95%)
MEMORY_THRESHOLD=80 # percent usage threshold for memory

# Function to check disk space
check_disk_space() {
  DISK_USAGE=$(df /ZPOOL | tail -n 1 | awk '{print $5}' | sed 's/%//')
  if [ $DISK_USAGE -ge $DISK_THRESHOLD ]; then
    echo "Disk space on /ZPOOL is above threshold ($DISK_USAGE% used). Please free up space." >> $logfile
    exit 1
  fi
}

# Function to check memory usage
check_memory() {
  MEM_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)
  if [ $MEM_USAGE -ge $MEMORY_THRESHOLD ]; then
    echo "Memory usage is above threshold ($MEM_USAGE% used). Please free up memory." >> $logfile
    exit 1
  fi
}

# Check disk space and memory before running jobs
check_disk_space
check_memory

# Loop through subjects and runs
for ppi in "0"; do # 0 indicates activation
  for model in 2; do
    for sub in `cat ${scriptdir}/newsubs.txt`; do
      for run in `seq $nruns`; do

        # Manages the number of jobs and cores
        SCRIPTNAME=${maindir}/code/L1stats_sharedreward.sh
        NCORES=15
        while [ $(ps -ef | grep -v grep | grep $SCRIPTNAME | wc -l) -ge $NCORES ]; do
          sleep 5s
          check_disk_space # Recheck disk space in case the script is running long
          check_memory # Recheck memory usage
        done

        # Run the script
        bash $SCRIPTNAME $model $sub $run $ppi $logfile &
        sleep 1s
      done
    done
  done
done
